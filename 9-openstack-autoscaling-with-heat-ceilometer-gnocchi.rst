:title: Autoscaling with Heat, Ceilometer and Gnocchi
:date: 2015-04-17 07:48
:category: Openstack
:tags: openstack, ceilometer, gnocchi, heat 
:status: draft


A while ago, I have made a quick `article/demo </autoscaling-with-heat-and-ceilometer>`_ of how to use Ceilometer instead of 
the builtin emulated Amazon CloudWatch resources of Heat.

To resume, when you were creating a stack, instances of this stack generate
notification that was received by ceilometer converted into samples and written 
to a database usually MongoDB. On another side Heat creates some alarms with 
the ceilometer-api that will trigger the heat autoscaling actions. These alarms 
define some rules against statistics on the previously recorded samples.
These statistics were computed on the fly when the alarms was evaluated.

The main issue was that the performance for evaluating all the defined alarms
directly depended on the number of alarms and the complexity to compute the
statistics. The computation of a statistics would result in a map 
reduce in MongoDB, more you ceilometer-alarm-evaluator workers and nodes, more your MongoDB does map reduce operation in parallel.

So, the more you want to reduce the time between a metric that will trigger alarm is received
and the moment of alarm is evaluated and trigger requested actions, the more you need workers and nodes and a solid and rapid MongoDB.

In Kilo, Ceilometer got a new dispatcher driver: Gnocchi. Instead of writing samples  directly into the database, Ceilometer converts them into Gnocchi elements (resource, metric and measurement) and
post them on the Gnocchi REST API.

Contrary to the current Ceilometer database dispatcher, Gnocchi aggregates
what it receives, and doesn't compute anything when you want to retrieve 
it.There is no more on the fly computation you can found more information about that
in Julien Danjou’s articles `"ceilometer the gnocchi experiment" <https://julien.danjou.info/blog/2014/openstack-ceilometer-the-gnocchi-experiment>`__ and `"gnocchi first release" <https://julien.danjou.info/blog/2015/openstack-gnocchi-first-release>`__,

On the Ceilometer alarm side, the system got some new alarm rules type dedicated to 
Gnocchi. So instead of describing rules that would trigger statistics computing, we define rules that will just get the result of pre-computed statistics.

That makes the Ceilometer alarm evaluators much more performant, the evaluation of an 
alarm just result to one HTTP call. On the Gnocchi side, when using the  Swift backend, 
this will go down to doing one SQL request to check RBAC, and one another HTTP call to Swift to retrieve the result. No more on-the-fly statistics computation of any data.

The side effect of that system is that you need to tell Gnocchi how you want to pre 
compute/aggregate data, that's all.


Playing with all of that with heat 
==================================

Devstack setup
--------------

Boot a vm, install devstack, configure your stack. Enable all Gnocchi/Heat/Ceilometer services in your localrc:


.. code-block:: shell

    enable_plugin gnocchi https://github.com/openstack/gnocchi master
    
    enable_service q-lbaas
    enable_service ceilometer-api,ceilometer-collector
    enable_service ceilometer-acompute
    enable_service ceilometer-alarm-notifier,ceilometer-alarm-evaluator
    enable_service heat,h-api,h-eng,h-api-cfn
    enable_service gnocchi-api
    IMAGE_URLS="http://ftp.free.fr/mirrors/fedora.redhat.com/fedora/linux/releases/21/Cloud/Images/x86_64/Fedora-Cloud-Base-20141203-21.x86_64.qcow2"
    GNOCCHI_COORDINATOR_URL=redis://localhost:6379?timeout=5

Enable a quicker processing of the ceilometer pipeline (every 10sec):

.. code-block:: shell

    CEILOMETER_PIPELINE_INTERVAL=10

Add the 'last' aggregation method to the default archive_policy of Gnocchi:

.. code-block:: shell

    [[post-config|$GNOCCHI_CONF]]
    [archive_policy]
    default_aggregation_methods = mean,min,max,sum,std,median,count,last,95pct


And go !

.. code-block:: shell
    
    $ ./stack.sh 
 
Let’s see some important configuration done by devstack to enable Gnocchi with Mysql and file as backend.

In Ceilometer, it have replaced the database dispatcher by Gnocchi with the following configuration:

.. code-block:: ini

    [DEFAULT]
    dispatcher = gnocchi
    
    [dispatcher_gnocchi]
    filter_project = gnocchi_swift
    filter_service_activity = True
    archive_policy = low
    url = http://192.168.3.51:8041

Note that it configures a filter to filter out all samples generated by Gnocchi. Otherwise each times we write to swift that will generated samples to write again to swift and this will create a storm of samples that grow indefinitely. The filter permit to break this unending loop.

Also for alarming, devstack set the Gnocchi API endpoint:

.. code-block:: ini
    
    [alarms]
    gnocchi_url = http://192.168.3.51:8041

On Gnocchi side, the file driver have been configured for the storage and the SQL database for the indexer:

.. code-block:: ini
    
    [storage]
    driver = file
    file_basepath = /opt/gnocchi/

    [indexer]
    url = mysql://root:password@127.0.0.1/gnocchi?charset=utf8


In case of Swift have been chosen instead of file, you will get:

.. code-block:: ini

    [storage]
    driver = swift
    swift_authurl = http://192.168.3.51:5000/v2.0/
    swift_auth_version = 2
    swift_tenant_name = gnocchi_swift
    swift_key = password
    swift_user = gnocchi_swift
    
*Note: The default devstack configuration of Swift can't handled the load generated by Gnocchi and Ceilometer,
The number of swift workers need to be increased.*

Heat stack setup
----------------

Once everything is up, we can create our first stack with these `templates <https://gist.github.com/sileht/81e5375bbbd0ea7fed8d>`__ :

.. code-block:: shell

    $ netid="dc88aba8-e062-4e88-af2b-3799d37b0110"
    $ subnetid="49fb0c92-c5da-42fa-b7ec-a9967976d4d0"
    $ pubnetid="faa263ef-bedd-445b-9f2a-99857b45956e"
    $ heat stack-create --template-file autoscaling_gnocchi.yaml --parameters "subnet_id=$subnetid;external_network_id=$pubnetid;network_id=$netid;key=sileht" gnocchi
    +--------------------------------------+------------+--------------------+----------------------+
    | id                                   | stack_name | stack_status       | creation_time        |
    +--------------------------------------+------------+--------------------+----------------------+
    | bab1a943-6647-4de3-bfd9-5e0630ccf409 | gnocchi    | CREATE_IN_PROGRESS | 2015-04-22T08:11:48Z |
    +--------------------------------------+------------+--------------------+----------------------+

    $ heat resource-list gnocchi
    +-----------------------------+----------------------------------------------+----------------------------------------------------+-----------------+----------------------+
    | resource_name               | physical_resource_id                         | resource_type                                      | resource_status | updated_time         |
    +-----------------------------+----------------------------------------------+----------------------------------------------------+-----------------+----------------------+
    | lb                          |                                              | OS::Neutron::LoadBalancer                          | CREATE_COMPLETE | 2015-04-22T13:51:57Z |
    | asg                         | 655e7e87-9e32-41aa-b49c-950512aa519b         | OS::Heat::AutoScalingGroup                         | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | cpu_alarm_high              | 1ebb71cb-1636-405d-9ca6-300622af9940         | OS::Ceilometer::GnocchiAggregationByResourcesAlarm | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | cpu_alarm_low               | ef2485b4-f3a2-4dbc-8195-6ef9063d0b73         | OS::Ceilometer::GnocchiAggregationByResourcesAlarm | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | database_password           | gnocchi2-database_password-de6upz5liayi      | OS::Heat::RandomString                             | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | database_root_password      | gnocchi2-database_root_password-qbz5ukcjuocf | OS::Heat::RandomString                             | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | db                          | 9e9cc43c-0db0-4191-b886-8d9930a7a558         | OS::Nova::Server                                   | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | lb_floating                 | 12296e32-8c16-4eed-9272-1400e160cec2         | OS::Neutron::FloatingIP                            | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | monitor                     | fbb55426-241a-4f1e-9e31-004b3a2db4a3         | OS::Neutron::HealthMonitor                         | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | pool                        | 0a5360fc-378f-4f89-8b92-cba81b05d859         | OS::Neutron::Pool                                  | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | web_server_scaledown_policy | d72492aebf214454a38526fec2b5debe             | OS::Heat::ScalingPolicy                            | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    | web_server_scaleup_policy   | db53a21a207e48c2ac9916285ce85a55             | OS::Heat::ScalingPolicy                            | CREATE_COMPLETE | 2015-04-22T13:51:58Z |
    +-----------------------------+----------------------------------------------+----------------------------------------------------+-----------------+----------------------+

*Obviouly you need to change the networks ids by yours.*

Quick looks of an alarm definition in the Heat templates:

.. code-block:: yaml

    cpu_alarm_high:
      type: OS::Ceilometer::GnocchiAggregationByResourcesAlarm
      properties:
        description: Scale-up if the last CPU > 50% for 1 minute
        metric: cpu_util
        threshold: 50
        comparison_operator: gt
        alarm_actions:
          - {get_attr: [web_server_scaleup_policy, alarm_url]}
        resource_type: instance
        aggregation_method: last
        granularity: 300
        evaluation_periods: 1
        query:
          str_replace:
            template: '{"=": {"server_group": "stack_id"}}'
            params:
              stack_id: {get_param: "OS::stack_id"}

The alarm definition looks almost like the legacy Ceilometer one.
The *query* is identical to the POST data of a `search API request in Gnocchi <http://docs.openstack.org/developer/gnocchi/rest.html#aggregation-across-metrics>`__

Also the Gnocchi resource attributes are strictly defined, "server_group" is one of the extended attributes of an instance. And of course the 'last CPU' is just for demo.

Now, take a look to the created Nova instances:

.. code-block:: shell

    $ nova list
    +--------------------------------------+-------------------------------------------------------+--------+------------+-------------+---------------------+
    | ID                                   | Name                                                  | Status | Task State | Power State | Networks            |
    +--------------------------------------+-------------------------------------------------------+--------+------------+-------------+---------------------+
    | 757ca456-a436-4770-9ce2-029d2b717340 | gn-qxjx-h26oilfiz4mu-ao3cn5ctyin2-server-ze4ulgwkg77y | ACTIVE |      -     | Running     | admpriv=192.168.0.7 |
    | 9e9cc43c-0db0-4191-b886-8d9930a7a558 | gnocchi2-db-6hlmbgeikp56                              | ACTIVE |      -     | Running     | admpriv=192.168.0.6 |
    +--------------------------------------+-------------------------------------------------------+--------+------------+-------------+---------------------+

Then in the terminal of the first instance (gn-qxjx-h26oilfiz4mu-ao3cn5ctyin2-server-ze4ulgwkg77y), I generated some load:

.. code-block:: shell

    $ yum install stress
    $ stress --cpu 2 --timeout 600


Some minutes later, in Nova, I can see the new instance booted by Heat:

.. code-block:: shell

    $ nova list
    +--------------------------------------+-------------------------------------------------------+--------+------------+-------------+---------------------+
    | ID                                   | Name                                                  | Status | Task State | Power State | Networks            |
    +--------------------------------------+-------------------------------------------------------+--------+------------+-------------+---------------------+
    | 757ca456-a436-4770-9ce2-029d2b717340 | gn-qxjx-h26oilfiz4mu-ao3cn5ctyin2-server-ze4ulgwkg77y | ACTIVE |      -     | Running     | admpriv=192.168.0.7 |
    | 9e9cc43c-0db0-4191-b886-8d9930a7a558 | gnocchi2-db-6hlmbgeikp56                              | ACTIVE |      -     | Running     | admpriv=192.168.0.6 |
    +--------------------------------------+-------------------------------------------------------+--------+------------+-------------+---------------------+


The Ceilometer alarms have been created:

.. code-block:: shell

    $ ceilometer alarm-show 51e11820-7f72-4a69-bd93-f3b686e0430c
    +---------------------------+--------------------------------------------------------------------------+
    | Property                  | Value                                                                    |
    +---------------------------+--------------------------------------------------------------------------+
    | aggregation_method        | last                                                                     |
    | alarm_actions             | [u'http://192.168.3.51:8000/v1/signal/arn%3Aopenstack%3Aheat%3A%3Abf9098 |
    |                           | 1532444f91b70d3f58e9fd1b3d%3Astacks%2Fgnocchi2%2Fd65c891b-4543-4d1e-aa39 |
    |                           | -4d446ce4a3e8%2Fresources%2Fweb_server_scaleup_policy?Timestamp=2015-04- |
    |                           | 23T14%3A50%3A52Z&SignatureMethod=HmacSHA256&AWSAccessKeyId=2c7195e4a6414 |
    |                           | 0719131680bf8a96d4b&SignatureVersion=2&Signature=hbQCSYsjd2f9%2FeH1mKZps |
    |                           | zI4ec20Ot0mVLBtCbkLpDU%3D']                                              |
    | alarm_id                  | 51e11820-7f72-4a69-bd93-f3b686e0430c                                     |
    | comparison_operator       | gt                                                                       |
    | description               | Scale-up if the last CPU > 50% for 1 minute                              |
    | enabled                   | True                                                                     |
    | evaluation_periods        | 1                                                                        |
    | granularity               | 300                                                                      |
    | insufficient_data_actions | None                                                                     |
    | metric                    | cpu_util                                                                 |
    | name                      | gnocchi2-cpu_alarm_high-rjpk5urpcoym                                     |
    | ok_actions                | None                                                                     |
    | project_id                | bf90981532444f91b70d3f58e9fd1b3d                                         |
    | query                     | {"=": {"server_group": "d65c891b-4543-4d1e-aa39-4d446ce4a3e8"}}          |
    | repeat_actions            | True                                                                     |
    | resource_type             | instance                                                                 |
    | severity                  | low                                                                      |
    | state                     | insufficient data                                                        |
    | threshold                 | 50.0                                                                     |
    | type                      | gnocchi_aggregation_by_resources_threshold                               |
    | user_id                   | e4affad987524aa1bf5a782e939efb65                                         |
    +---------------------------+--------------------------------------------------------------------------+


Gnocchi provides some basic graphing view of resources, for now this is mainly for development/debugging purpose, to access it with keystone middleware enable, you inject the token to all your requests like this:

.. code-block:: shell

    $ sudo pip install mitmproxy
    $ source devstack/openrc admin admin
    $ token=$(openstack token issue -f value -c id)
    $ mitmproxy -p 8042 -R http2http://localhost:8041/ --setheader ":~hq:X-Auth-Token: $token"

And then point your browser to a resource URL on the port 8042 of your devstack:

* cpu_util of the first instance: http://localhost:8042/v1/resource/instance/53b5f608-320c-4ead-82e2-bde0b500ebd8/metric/cpu_util/measures

.. figure:: /images/9-cpu_util_example.png
   :alt: cpu_util example
